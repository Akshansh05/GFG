class Solution {
    public int findCheapestPrice(int n, int[][] flights, int src, int dst, int k) {
        
        
     HashMap<Integer,List<int[]>> map =  new HashMap<>();
        
        for(int i =0;i<flights.length;i++){
            int sorc = flights[i][0];
            int dest = flights[i][1];
            int cost = flights[i][2];
            map.computeIfAbsent(sorc , key -> new ArrayList<>()).add(new int[]{dest,cost});

        }
        
        Queue<int[]> q = new LinkedList<>();
        
        q.offer(new int[]{src,0});
        
       int vis[] = new int[n];
        
        Arrays.fill(vis,Integer.MAX_VALUE);
        
        vis[src] = 0;
        
        while(!q.isEmpty() && k >=0){
        
        int size = q.size();
            for(int i=0;i<size;i++){
                
                int currQ[] = q.poll();
                int currSrc = currQ[0];
                int currPrice = currQ[1];
                
                for(int [] desNode : map.getOrDefault(currSrc ,new ArrayList<>())){
                    int currD = desNode[0];
                    int dPrice = desNode[1];
                    
                    int newPrice = currPrice + dPrice;
                    
                    if(vis[currD] == Integer.MAX_VALUE || newPrice < vis[currD]){
                        vis[currD] = newPrice;
                        q.add(new int[] {currD,newPrice});
                    }
                }                
            }
           k--; 
            
        }
        return vis[dst] == Integer.MAX_VALUE ? -1 : vis[dst];
    }
}
