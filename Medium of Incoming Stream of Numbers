class MedianFinder {

        PriorityQueue<Integer> maxHeap;
        PriorityQueue<Integer>minHeap;
    public MedianFinder() {
        maxHeap = new PriorityQueue<Integer> (Collections.reverseOrder());
        minHeap = new PriorityQueue<Integer>();
    }
    
    public void addNum(int num) {
        
        if(maxHeap.isEmpty()  || num < maxHeap.peek()){
            maxHeap.add(num);
        }else{
            minHeap.add(num);
        }
        
        if(maxHeap.size()>minHeap.size()+1){
            minHeap.add(maxHeap.poll());
        }else if(minHeap.size()>maxHeap.size()+1){
            maxHeap.add(minHeap.poll());
        }
    }
    
    public double findMedian() {
        
        if(minHeap.size() == maxHeap.size()){
            return (double) (minHeap.peek()+maxHeap.peek())/2;
        }else if(minHeap.size() >maxHeap.size()){
            return minHeap.peek();
        }else{
             return maxHeap.peek();
        }
    }
}

/**
 * Your MedianFinder object will be instantiated and called as such:
 * MedianFinder obj = new MedianFinder();
 * obj.addNum(num);
 * double param_2 = obj.findMedian();
 */
