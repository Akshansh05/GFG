//{ Driver Code Starts


import java.util.*;
import java.io.*;
import java.lang.*;

public class Main{
	static BufferedReader br;
	static PrintWriter ot;
    public static void main(String args[]) throws IOException {
		br = new BufferedReader(new InputStreamReader(System.in));
		ot = new PrintWriter(System.out);
		int t = Integer.parseInt(br.readLine().trim());
		while(t-- > 0){
			String s[] = br.readLine().trim().split(" ");
			int V = Integer.parseInt(s[0]);
			int E = Integer.parseInt(s[1]);
			int edges[][] = new int[E][3];
			for(int i = 0; i < E; i++){
				s = br.readLine().trim().split(" ");
				edges[i][0] = Integer.parseInt(s[0]);
				edges[i][1] = Integer.parseInt(s[1]);
				edges[i][2] = Integer.parseInt(s[2]);
			}
			ot.println(new Solution().spanningTree(V, E, edges));
		}
		ot.close();
	}
}
// } Driver Code Ends


// User function Template for Java

class Solution{
	static int spanningTree(int V, int E, int edges[][]){
	    // Code Here. 
	    
        DisjointSet ds = new DisjointSet(V);
        
    Arrays.sort(edges, new c());
    
    int sum=0;
    
    for(int i =0 ; i<E ;i++ ){
        
        int u = edges[i][0];
        int v = edges[i][1];
        
        int weight = edges[i][2];
        
        if(ds.findParent(u) != ds.findParent(v)){
            sum +=weight;
        }
          ds.unionByRank(u,v);
        
    }
    
    return sum;
        
	    
	}
	
	    
	    static class c implements Comparator<int[]>{
	        
	        public int compare(int a[] , int b[]){
	            
	            return a[2] -b[2];
	        }
	    }
	
 static class DisjointSet{
     
     int parent[];
     int rank[];
     
     int size ;
     
     
     public DisjointSet(int size){
         
        this.size =size;
       parent  = new int[size+1];
       rank   = new int[size+1];
       
       for(int i =0 ;i <=size;i++){
           parent[i] =i;
           rank[i]=0;
       }
     }
     
     public void unionByRank(int u ,int v){
         int up = findParent(u);
         int vp = findParent(v);
         
         if(up == vp)
            return;
        
        if(rank[up]< rank[vp]){
            parent[up] = vp;
            
        }else  if(rank[vp]< rank[up]) {
             parent[vp] = up;
        }else{
             parent[vp] = up;
             rank[up]++;
        }
     }
     
     public int findParent(int u){
         
         if(u ==parent[u]){
             return u;
         }
         
        return parent[u] = findParent(parent[u]);
     }
     
 }
	
	
}
