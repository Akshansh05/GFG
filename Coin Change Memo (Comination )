class Solution {
    public int change(int amount, int[] coins) {
        
        int dp[][] = new int[coins.length][amount+1];

            for (int[] r : dp) {
                Arrays.fill(r,-1);
            }
           return helper(coins.length-1 ,amount,dp,coins);
                
    }

  int helper(int index , int target , int dp[][],int[] coins){

            if(index == 0){
                return(target % coins[0] == 0 ? 1 : 0);
            }
            //think of amount as 12 and coin as 4  gives 1 combination
           // think of amount as 6 and coin as 7  gives 0 combination
            // think of amount as 0 and coin as 7  gives 1 combination
            if(dp[index][target]!=-1){
                return dp[index][target];
            }
            int notTake  = helper(index-1,target,dp,coins);

            int take =0;
            if(coins[index]<= target){
            take =  helper(index,target-coins[index],dp,coins);
            }
            return dp[index][target] = take+notTake;

        }
         
}
